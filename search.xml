<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HTML表格</title>
      <link href="/2020/05/14/html-biao-ge/"/>
      <url>/2020/05/14/html-biao-ge/</url>
      
        <content type="html"><![CDATA[<p>主要使用到的标签：<code>table</code>、<code>tr</code>、<code>th</code>、<code>td</code></p><p>使用表格进行布局的坏处：</p><ol type="1"><li>减少了视觉受损用户的可访问性；</li><li>表格会产生很多标签；</li><li>表格不能自动响应（使用正确的语义块级标签或<code>&lt;div&gt;</code>其默认宽度是父元素的100%，而表格不是），所以我们需要更多的操作来进行更改；</li></ol><h1 id="合并单元格">合并单元格</h1><p><code>th</code>和<code>td</code>标签有<code>colspan</code>和<code>rowspan</code>属性来控制。</p><h1 id="为表格的列提供共同的样式">为表格的列提供共同的样式</h1><p>使用<code>colgroup</code>和<code>col</code>标签进行如下定义：</p><div class="sourceCode" id="cb1"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb1-1"><a href="#cb1-1"></a><span class="kw">&lt;table&gt;</span></span><span id="cb1-2"><a href="#cb1-2"></a>  <span class="kw">&lt;colgroup&gt;</span></span><span id="cb1-3"><a href="#cb1-3"></a>    <span class="kw">&lt;col&gt;</span></span><span id="cb1-4"><a href="#cb1-4"></a>    <span class="kw">&lt;col</span><span class="ot"> style=</span><span class="st">"background-color: yellow"</span><span class="kw">&gt;</span></span><span id="cb1-5"><a href="#cb1-5"></a>  <span class="kw">&lt;/colgroup&gt;</span></span><span id="cb1-6"><a href="#cb1-6"></a>  <span class="kw">&lt;tr&gt;</span></span><span id="cb1-7"><a href="#cb1-7"></a>    <span class="kw">&lt;th&gt;</span>Data 1<span class="kw">&lt;/th&gt;</span></span><span id="cb1-8"><a href="#cb1-8"></a>    <span class="kw">&lt;th&gt;</span>Data 2<span class="kw">&lt;/th&gt;</span></span><span id="cb1-9"><a href="#cb1-9"></a>  <span class="kw">&lt;/tr&gt;</span></span><span id="cb1-10"><a href="#cb1-10"></a>  <span class="kw">&lt;tr&gt;</span></span><span id="cb1-11"><a href="#cb1-11"></a>    <span class="kw">&lt;td&gt;</span>Calcutta<span class="kw">&lt;/td&gt;</span></span><span id="cb1-12"><a href="#cb1-12"></a>    <span class="kw">&lt;td&gt;</span>Orange<span class="kw">&lt;/td&gt;</span></span><span id="cb1-13"><a href="#cb1-13"></a>  <span class="kw">&lt;/tr&gt;</span></span><span id="cb1-14"><a href="#cb1-14"></a>  <span class="kw">&lt;tr&gt;</span></span><span id="cb1-15"><a href="#cb1-15"></a>    <span class="kw">&lt;td&gt;</span>Robots<span class="kw">&lt;/td&gt;</span></span><span id="cb1-16"><a href="#cb1-16"></a>    <span class="kw">&lt;td&gt;</span>Jazz<span class="kw">&lt;/td&gt;</span></span><span id="cb1-17"><a href="#cb1-17"></a>  <span class="kw">&lt;/tr&gt;</span></span><span id="cb1-18"><a href="#cb1-18"></a><span class="kw">&lt;/table&gt;</span></span></code></pre></div><table><colgroup><col><col style="background-color: yellow"></colgroup><tbody><tr><th>Data 1</th><th>Data 2</th></tr><tr><td>Calcutta</td><td>Orange</td></tr><tr><td>Robots</td><td>Jazz</td></tr></tbody></table><ul><li>有多少列，就写多少个<code>col</code></li><li>想要改变格式的列，在其对应的<code>col</code>元素中加入样式；</li><li>如果想要一次定义多列，使用<code>span</code>属性；</li></ul><div class="sourceCode" id="cb2"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb2-1"><a href="#cb2-1"></a><span class="kw">&lt;colgroup&gt;</span></span><span id="cb2-2"><a href="#cb2-2"></a>  <span class="kw">&lt;col</span><span class="ot"> style=</span><span class="st">"background-color: yellow"</span><span class="ot"> span=</span><span class="st">"2"</span><span class="kw">&gt;</span></span><span id="cb2-3"><a href="#cb2-3"></a><span class="kw">&lt;/colgroup&gt;</span></span></code></pre></div><h1 id="给表格增加一个标题">给表格增加一个标题</h1><p>使用<code>caption</code>元素。</p><div class="sourceCode" id="cb3"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb3-1"><a href="#cb3-1"></a><span class="kw">&lt;table&gt;</span></span><span id="cb3-2"><a href="#cb3-2"></a>  <span class="kw">&lt;caption&gt;</span>Dinosaurs in the Jurassic period<span class="kw">&lt;/caption&gt;</span></span><span id="cb3-3"><a href="#cb3-3"></a></span><span id="cb3-4"><a href="#cb3-4"></a>  ...</span><span id="cb3-5"><a href="#cb3-5"></a><span class="kw">&lt;/table&gt;</span></span></code></pre></div><h1 id="使用一些标签更加结构化表格">使用一些标签更加结构化表格</h1><p>表头：<code>thead</code>、页脚：<code>tfoot</code>、正文：<code>tbody</code>。</p><p>主要是为了方便使用CSS控制表格样式。</p><div class="sourceCode" id="cb4"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb4-1"><a href="#cb4-1"></a></span><span id="cb4-2"><a href="#cb4-2"></a><span class="kw">&lt;table&gt;</span></span><span id="cb4-3"><a href="#cb4-3"></a>  <span class="kw">&lt;caption&gt;</span> ... <span class="kw">&lt;/caption&gt;</span></span><span id="cb4-4"><a href="#cb4-4"></a>  <span class="kw">&lt;thead&gt;</span> <span class="kw">&lt;tr&gt;</span> <span class="kw">&lt;th&gt;&lt;/th&gt;</span> ... <span class="kw">&lt;/tr&gt;</span> <span class="kw">&lt;/thead&gt;</span></span><span id="cb4-5"><a href="#cb4-5"></a>  <span class="kw">&lt;tbody&gt;</span> <span class="kw">&lt;tr&gt;</span> <span class="kw">&lt;td&gt;&lt;/td&gt;</span> ... <span class="kw">&lt;/tr&gt;</span> ... <span class="kw">&lt;/tbody&gt;</span></span><span id="cb4-6"><a href="#cb4-6"></a>  <span class="kw">&lt;tfoot&gt;</span> <span class="kw">&lt;tr&gt;</span> <span class="kw">&lt;td&gt;&lt;/td&gt;</span> ... <span class="kw">&lt;/tr&gt;</span> <span class="kw">&lt;/tbody&gt;</span></span><span id="cb4-7"><a href="#cb4-7"></a><span class="kw">&lt;/table&gt;</span></span></code></pre></div><h1 id="嵌套表格">嵌套表格</h1><p>即在<code>td</code>元素内再写一个完整的<code>table</code>，不推荐使用。</p><h1 id="为视力受损者">为视力受损者</h1><ol type="1"><li>在行标目和列表目分别使用<code>scope="row"</code>和<code>scope="col"</code>来指定其存在，如果这个标目是多个行或列的标题，则使用<code>rowgroup</code>或<code>colgroup</code>；</li><li>为行标目和列表目添加唯一的<code>id</code>，然后在属于其的单元格上加入属性<code>headers</code>，值为其属于的行标目和列表目的<code>id</code>，这样可以表示单元格和行、列直接的关系，便于视力受损者使用阅读器来识别；</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MDN学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML多媒体</title>
      <link href="/2020/05/13/html-duo-mei-ti/"/>
      <url>/2020/05/13/html-duo-mei-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="html图片">HTML图片</h1><p>警告：大多数图片是有版权的。除非是以下的情况，不然不要在你的网页上使用图片：</p><ol type="1"><li>你是图片版权所有者</li><li>你有图片版权所有者明确的、书面上的使用授权</li><li>你有充分的证据证明这张图片是公共领域内的</li></ol><p>侵犯版权是违法并且不道德的。此外，在得到授权之前永远不要把你的src属性指向其他人网站上的图片。这被称为"盗链（hotlinking）"。同样，盗取其他人的带宽也是违法的。而且这会降低你的页面的加载速度，而且图片可能会在不受你控制的情况下被移走或用别的令人尴尬的东西替换掉。</p><blockquote><p><code>&lt;img&gt;</code>或<code>&lt;video&gt;</code>等元素又被称为替换元素，因为其性质完全有其链接的外部资源定义。</p></blockquote><h2 id="替代文本">替代文本</h2><p><code>alt</code>属性：如果是装饰，可以置空。</p><h2 id="宽度和高度">宽度和高度</h2><p>这里设置宽度和高度，必须设置和原始图像一样的大小。这里的设置仅仅是为了如果图片还没有加载出来，会预留出图像的空间，便于网页排版（也有利于网页加载）。</p><p>如果想要改变图像的大小，请使用CSS。</p><h2 id="图像标题">图像标题</h2><p>鼠标悬停的时候会显示，不是很重要。（一般用下面的<code>figcaption</code>）。</p><h2 id="图像的说明文字">图像的说明文字</h2><p>推荐使用<code>figure</code>和<code>figcaption</code>元素:</p><div class="sourceCode" id="cb1"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb1-1"><a href="#cb1-1"></a><span class="kw">&lt;figure&gt;</span></span><span id="cb1-2"><a href="#cb1-2"></a>    <span class="kw">&lt;img</span><span class="ot"> src=</span><span class="st">"..."</span><span class="kw">&gt;</span></span><span id="cb1-3"><a href="#cb1-3"></a>    <span class="kw">&lt;img</span><span class="ot"> src=</span><span class="st">"..."</span><span class="kw">&gt;</span></span><span id="cb1-4"><a href="#cb1-4"></a>    <span class="kw">&lt;figcaption&gt;</span>这组图片的标题<span class="kw">&lt;/figcaption&gt;</span></span><span id="cb1-5"><a href="#cb1-5"></a><span class="kw">&lt;/figure&gt;</span></span></code></pre></div><p><code>figure</code>中不一定只是图片，还可以是代码、音频、视频等等，其只是一个独立的内容单元，只要符合：</p><ul><li>用简单、直观的方式表达意图；</li><li>可以置于线性流的某处；</li><li>有主要内容的补充说明；</li></ul><p>即可。</p><h2 id="css背景图片">CSS背景图片</h2><p>如果是为了装饰，使用CSS背景图片（便于控制大小和位置）；</p><p>如果图片有实际的意义，对网页的内容是有意义的，则使用html元素插入。</p><h1 id="html视频">HTML视频</h1><p>其使用的基本格式：</p><div class="sourceCode" id="cb2"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb2-1"><a href="#cb2-1"></a><span class="kw">&lt;video</span><span class="ot"> src=</span><span class="st">"rabbit320.webm"</span><span class="ot"> controls</span><span class="kw">&gt;</span></span><span id="cb2-2"><a href="#cb2-2"></a>  <span class="kw">&lt;p&gt;</span>你的浏览器不支持 HTML5 视频。可点击<span class="kw">&lt;a</span><span class="ot"> href=</span><span class="st">"rabbit320.mp4"</span><span class="kw">&gt;</span>此链接<span class="kw">&lt;/a&gt;</span>观看<span class="kw">&lt;/p&gt;</span></span><span id="cb2-3"><a href="#cb2-3"></a><span class="kw">&lt;/video&gt;</span></span></code></pre></div><p>或</p><div class="sourceCode" id="cb3"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb3-1"><a href="#cb3-1"></a><span class="kw">&lt;video</span><span class="ot"> controls width=</span><span class="st">"400"</span><span class="ot"> height=</span><span class="st">"400"</span></span><span id="cb3-2"><a href="#cb3-2"></a><span class="ot">       autoplay loop muted</span></span><span id="cb3-3"><a href="#cb3-3"></a><span class="ot">       poster=</span><span class="st">"poster.png"</span><span class="kw">&gt;</span></span><span id="cb3-4"><a href="#cb3-4"></a>  <span class="kw">&lt;source</span><span class="ot"> src=</span><span class="st">"rabbit320.mp4"</span><span class="ot"> type=</span><span class="st">"video/mp4"</span><span class="kw">&gt;</span></span><span id="cb3-5"><a href="#cb3-5"></a>  <span class="kw">&lt;source</span><span class="ot"> src=</span><span class="st">"rabbit320.webm"</span><span class="ot"> type=</span><span class="st">"video/webm"</span><span class="kw">&gt;</span></span><span id="cb3-6"><a href="#cb3-6"></a>  <span class="kw">&lt;p&gt;</span>你的浏览器不支持 HTML5 视频。可点击<span class="kw">&lt;a</span><span class="ot"> href=</span><span class="st">"rabbit320.mp4"</span><span class="kw">&gt;</span>此链接<span class="kw">&lt;/a&gt;</span>观看<span class="kw">&lt;/p&gt;</span></span><span id="cb3-7"><a href="#cb3-7"></a><span class="kw">&lt;/video&gt;</span></span></code></pre></div><ol type="1"><li><code>src</code>：类似图片；</li><li><code>controls</code>：允许用户能够控制视频和音频的回放功能；</li><li><code>&lt;video&gt;标签内的段落</code>：这个叫做<strong>后备内容</strong> — 当浏览器不支持 <code>&lt;video&gt;</code> 标签的时候，它将会显示出来，它使我们能够对旧的浏览器做一些兼容处理。你可以添加任何后备内容，在这个例子中我们提供了一个指向这个视频文件的链接，从而使用户可以至少访问到这个文件，而不会局限于浏览器的支持。</li><li><code>weight</code>和<code>height</code>：无论怎么设置，视频的长宽比是会被保持的；</li><li><code>autoplay</code>：自动播放，不建议设置；</li><li><code>loop</code>：循环播放，不建议设置；</li><li><code>muted</code>：默认关闭声音；</li><li><code>poster</code>：指向一个图像的url，在视频播放前，用于粗略地显示视频内容或广告；</li><li><code>preload</code>：用来缓冲视频；</li></ol><p>因为兼容性的问题，可能某个格式的视频文件无法被浏览器播放，所以一种可行的方式是放多个不同格式的视频，让浏览器来选择。这就需要把<code>src</code>属性从<code>vedio</code>元素移到内部的<code>soruce</code>元素中，最好加上<code>type</code>属性，这个值可以查阅<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Supported_media_formats" target="_blank" rel="noopener">MIME types</a>得知。</p><h1 id="html音频">HTML音频</h1><p>其基本和<code>video</code>标签一致：</p><div class="sourceCode" id="cb4"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb4-1"><a href="#cb4-1"></a><span class="kw">&lt;audio</span><span class="ot"> controls</span><span class="kw">&gt;</span></span><span id="cb4-2"><a href="#cb4-2"></a>  <span class="kw">&lt;source</span><span class="ot"> src=</span><span class="st">"viper.mp3"</span><span class="ot"> type=</span><span class="st">"audio/mp3"</span><span class="kw">&gt;</span></span><span id="cb4-3"><a href="#cb4-3"></a>  <span class="kw">&lt;source</span><span class="ot"> src=</span><span class="st">"viper.ogg"</span><span class="ot"> type=</span><span class="st">"audio/ogg"</span><span class="kw">&gt;</span></span><span id="cb4-4"><a href="#cb4-4"></a>  <span class="kw">&lt;p&gt;</span>你的浏览器不支持 HTML5 音频，可点击<span class="kw">&lt;a</span><span class="ot"> href=</span><span class="st">"viper.mp3"</span><span class="kw">&gt;</span>此链接<span class="kw">&lt;/a&gt;</span>收听。<span class="kw">&lt;/p&gt;</span></span><span id="cb4-5"><a href="#cb4-5"></a><span class="kw">&lt;/audio&gt;</span></span></code></pre></div><p>区别：其不支持<code>width/height</code>和<code>poster</code>属性。</p><h1 id="html嵌入">HTML嵌入</h1><p>Youtube视频--&gt;共享--&gt;嵌入--&gt;得到一段<code>&lt;iframe&gt;</code>代码，将这段代码加入HTML文件，有如下效果： <img src="/2020/05/13/html-duo-mei-ti/HTML多媒体_2020-05-14-09-45-19.png" alt="Youtube视频嵌入"></p><h2 id="iframe嵌入">iframe嵌入</h2><p><code>&lt;iframe&gt;</code>旨在将其他web文档嵌入当前文档中，这个web文档本身无法直接控制，但这对于某些需求足够了，比如：视频、评论系统、在线地图、广告横幅等等。</p><p>以为是<code>&lt;iframe&gt;</code>的示例：</p><div class="sourceCode" id="cb5"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb5-1"><a href="#cb5-1"></a><span class="kw">&lt;iframe</span><span class="ot"> src=</span><span class="st">"https://developer.mozilla.org/en-US/docs/Glossary"</span></span><span id="cb5-2"><a href="#cb5-2"></a><span class="ot">        width=</span><span class="st">"100%"</span><span class="ot"> height=</span><span class="st">"500"</span><span class="ot"> frameborder=</span><span class="st">"0"</span></span><span id="cb5-3"><a href="#cb5-3"></a><span class="ot">        allowfullscreen sandbox</span><span class="kw">&gt;</span></span><span id="cb5-4"><a href="#cb5-4"></a>  <span class="kw">&lt;p&gt;</span> <span class="kw">&lt;a</span><span class="ot"> href=</span><span class="st">"https://developer.mozilla.org/en-US/docs/Glossary"</span><span class="kw">&gt;</span></span><span id="cb5-5"><a href="#cb5-5"></a>    Fallback link for browsers that don't support iframes</span><span id="cb5-6"><a href="#cb5-6"></a>  <span class="kw">&lt;/a&gt;</span> <span class="kw">&lt;/p&gt;</span></span><span id="cb5-7"><a href="#cb5-7"></a><span class="kw">&lt;/iframe&gt;</span></span></code></pre></div><ul><li><code>allowfullscreen</code>：如果设置，<code>&lt;iframe&gt;</code>则可以通过全屏API设置为全屏模式（稍微超出本文的范围）。</li><li><code>frameborder</code>：如果设置为1，则会告诉浏览器在此框架和其他框架之间绘制边框，这是默认行为。0删除边框。不推荐这样设置，因为在CSS中可以更好地实现相同的效果。</li><li><code>src</code>：该属性与<code>&lt;video&gt;</code>/<code>&lt;img&gt;</code>一样包含指向要嵌入文档的URL路径。为了提高速度，在主内容完成加载后，使用JavaScript设置iframe的src属性是个好主意。这使您的页面可以更快地被使用，并减少您的官方页面加载时间（重要的SEO指标）。</li><li><code>width</code>和<code>height</code>：高度和宽度；</li><li>备选内容：与<code>&lt;video&gt;</code>等其他类似元素相同，您可以在<code>&lt;iframe&gt;&lt;/iframe&gt;</code>标签之间包含备选内容，如果浏览器不支持<code>&lt;iframe&gt;</code>，将会显示备选内容，这种情况下，我们已经添加了一个到该页面的链接。现在您几乎不可能遇到任何不支持<code>&lt;iframe&gt;</code>的浏览器。</li><li><code>sandbox</code>：该属性需要在已经支持其他<code>&lt;iframe&gt;</code>功能（例如IE 10及更高版本）但稍微更现代的浏览器上才能工作，该属性可以提高安全性设置。应该始终使用它。</li></ul><h2 id="embed和object">embed和object</h2><p><code>&lt;embed&gt;</code>和<code>&lt;object&gt;</code>元素的功能不同于<code>&lt;iframe&gt;</code>—— 这些元素是用来嵌入多种类型的外部内容的通用嵌入工具，其中包括像Java小程序和Flash，PDF（可在浏览器中显示为一个PDF插件）这样的插件技术，甚至像视频，SVG和图像的内容。（当然，要么有更好的元素来实现，要么已经过时，碰到的机会很少了。） <img src="/2020/05/13/html-duo-mei-ti/HTML多媒体_2020-05-14-09-58-48.png" alt="embed和object的用法"></p><p>例子1（<code>embed</code>嵌入flash影片）：</p><div class="sourceCode" id="cb6"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb6-1"><a href="#cb6-1"></a><span class="kw">&lt;embed</span><span class="ot"> src=</span><span class="st">"whoosh.swf"</span><span class="ot"> quality=</span><span class="st">"medium"</span></span><span id="cb6-2"><a href="#cb6-2"></a><span class="ot">       bgcolor=</span><span class="st">"#ffffff"</span><span class="ot"> width=</span><span class="st">"550"</span><span class="ot"> height=</span><span class="st">"400"</span></span><span id="cb6-3"><a href="#cb6-3"></a><span class="ot">       name=</span><span class="st">"whoosh"</span><span class="ot"> align=</span><span class="st">"middle"</span><span class="ot"> allowScriptAccess=</span><span class="st">"sameDomain"</span></span><span id="cb6-4"><a href="#cb6-4"></a><span class="ot">       allowFullScreen=</span><span class="st">"false"</span><span class="ot"> type=</span><span class="st">"application/x-shockwave-flash"</span></span><span id="cb6-5"><a href="#cb6-5"></a><span class="ot">       pluginspage=</span><span class="st">"http://www.macromedia.com/go/getflashplayer"</span><span class="kw">&gt;</span></span></code></pre></div><p>例子2（<code>object</code>嵌入pdf）：</p><div class="sourceCode" id="cb7"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb7-1"><a href="#cb7-1"></a><span class="kw">&lt;object</span><span class="ot"> data=</span><span class="st">"mypdf.pdf"</span><span class="ot"> type=</span><span class="st">"application/pdf"</span></span><span id="cb7-2"><a href="#cb7-2"></a><span class="ot">        width=</span><span class="st">"800"</span><span class="ot"> height=</span><span class="st">"1200"</span><span class="ot"> typemustmatch</span><span class="kw">&gt;</span></span><span id="cb7-3"><a href="#cb7-3"></a>  <span class="kw">&lt;p&gt;</span>You don't have a PDF plugin, but you can <span class="kw">&lt;a</span><span class="ot"> href=</span><span class="st">"myfile.pdf"</span><span class="kw">&gt;</span>download the PDF file.<span class="kw">&lt;/a&gt;&lt;/p&gt;</span></span><span id="cb7-4"><a href="#cb7-4"></a><span class="kw">&lt;/object&gt;</span></span></code></pre></div><h1 id="html矢量图">HTML矢量图</h1><ul><li>位图使用像素网格来定义 — 一个位图文件精确得包含了每个像素的位置和它的色彩信息。流行的位图格式包括 Bitmap (<code>.bmp</code>), PNG (<code>.png</code>), JPEG (<code>.jpg</code>), and GIF (<code>.gif</code>)。</li><li>矢量图使用算法来定义 — 一个矢量图文件包含了图形和路径的定义，电脑可以根据这些定义计算出当它们在屏幕上渲染时应该呈现的样子。 <code>SVG</code> 格式可以让我们创造用于 Web 的精彩的矢量图形。</li></ul><p><code>SVG</code> 是用于描述矢量图像的XML语言。 它基本上是像HTML一样的标记，只是你有许多不同的元素来定义要显示在图像中的形状，以及要应用于这些形状的效果。 SVG用于标记图形，而不是内容。 非常简单，你有一些元素来创建简单图形，如<code>&lt;circle&gt;</code> 和<code>&lt;rect&gt;</code>。更高级的SVG功能包括 <code>&lt;feColorMatrix&gt;</code>（使用变换矩阵转换颜色）<code>&lt;animate&gt;</code> （矢量图形的动画部分）和 <code>&lt;mask&gt;</code>（在图像顶部应用模板）。</p><p>比如下面的例子创建了一个圆和矩形：</p><div class="sourceCode" id="cb8"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb8-1"><a href="#cb8-1"></a><span class="kw">&lt;svg</span><span class="ot"> version=</span><span class="st">"1.1"</span></span><span id="cb8-2"><a href="#cb8-2"></a><span class="ot">     baseProfile=</span><span class="st">"full"</span></span><span id="cb8-3"><a href="#cb8-3"></a><span class="ot">     width=</span><span class="st">"300"</span><span class="ot"> height=</span><span class="st">"200"</span></span><span id="cb8-4"><a href="#cb8-4"></a><span class="ot">     xmlns=</span><span class="st">"http://www.w3.org/2000/svg"</span><span class="kw">&gt;</span></span><span id="cb8-5"><a href="#cb8-5"></a>  <span class="kw">&lt;rect</span><span class="ot"> width=</span><span class="st">"100%"</span><span class="ot"> height=</span><span class="st">"100%"</span><span class="ot"> fill=</span><span class="st">"black"</span> <span class="kw">/&gt;</span></span><span id="cb8-6"><a href="#cb8-6"></a>  <span class="kw">&lt;circle</span><span class="ot"> cx=</span><span class="st">"150"</span><span class="ot"> cy=</span><span class="st">"100"</span><span class="ot"> r=</span><span class="st">"90"</span><span class="ot"> fill=</span><span class="st">"blue"</span> <span class="kw">/&gt;</span></span><span id="cb8-7"><a href="#cb8-7"></a><span class="kw">&lt;/svg&gt;</span></span></code></pre></div><svg version="1.1" baseProfile="full" width="300" height="200" xmlns="http://www.w3.org/2000/svg"><rect width="100%" height="100%" fill="black"></rect> <circle cx="150" cy="100" r="90" fill="blue"></circle></svg><p>但用<code>svg</code>绘制复杂的图像会导致一些问题（文件太大，处理时间长等），所以储存照片等复杂精密的图像时一般还是使用位图。</p><h2 id="插入方式1">插入方式1</h2><p>使用<code>img</code>，像插入一张普通图片一样插入，只是需要提供<code>width</code>或<code>height</code>。</p><div class="sourceCode" id="cb9"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb9-1"><a href="#cb9-1"></a><span class="kw">&lt;img</span></span><span id="cb9-2"><a href="#cb9-2"></a><span class="ot">    src=</span><span class="st">"equilateral.svg"</span></span><span id="cb9-3"><a href="#cb9-3"></a><span class="ot">    alt=</span><span class="st">"triangle with all three sides equal"</span></span><span id="cb9-4"><a href="#cb9-4"></a><span class="ot">    height=</span><span class="st">"87px"</span></span><span id="cb9-5"><a href="#cb9-5"></a><span class="ot">    width=</span><span class="st">"100px"</span> <span class="kw">/&gt;</span></span></code></pre></div><p>优点：</p><ul><li>快速，熟悉的图像语法与<code>alt</code>属性中提供的内置文本等效。</li><li>可以通过在<code>&lt;a&gt;</code>元素嵌套<code>&lt;img&gt;</code>，使图像轻松地成为超链接。</li></ul><p>缺点：</p><ul><li>无法使用JavaScript操作图像。</li><li>如果要使用CSS控制SVG内容，则必须在SVG代码中包含内联CSS样式。 （从SVG文件调用的外部样式表不起作用）</li><li>不能用CSS伪类来重设图像样式（如:<code>focus</code>）。</li></ul><h2 id="插入方式2">插入方式2</h2><p>这称为<strong>SVG内联</strong>或<strong>内联SVG</strong>。打开SVG文件，复制SVG代码，并将其粘贴到HTML文档中。确保您的SVG代码在<code>&lt;svg&gt;&lt;/svg&gt;</code>标签中。</p><div class="sourceCode" id="cb10"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb10-1"><a href="#cb10-1"></a><span class="kw">&lt;svg</span><span class="ot"> width=</span><span class="st">"300"</span><span class="ot"> height=</span><span class="st">"200"</span><span class="kw">&gt;</span></span><span id="cb10-2"><a href="#cb10-2"></a>    <span class="kw">&lt;rect</span><span class="ot"> width=</span><span class="st">"100%"</span><span class="ot"> height=</span><span class="st">"100%"</span><span class="ot"> fill=</span><span class="st">"green"</span> <span class="kw">/&gt;</span></span><span id="cb10-3"><a href="#cb10-3"></a><span class="kw">&lt;/svg&gt;</span></span></code></pre></div><p>优点：</p><ul><li>将 SVG 内联减少 HTTP 请求，可以减少加载时间。</li><li>您可以为 SVG 元素分配<code>class</code>和<code>id</code>，并使用 CSS 修改样式，无论是在SVG中，还是 HTML 文档中的 CSS 样式规则。 实际上，您可以使用任何 SVG外观属性 作为CSS属性。</li><li>内联SVG是唯一可以让您在SVG图像上使用CSS交互（如:<code>focus</code>）和CSS动画的方法（即使在常规样式表中）。</li><li>您可以通过将 SVG 标记包在<code>&lt;a&gt;</code>元素中，使其成为超链接。</li></ul><p>缺点：</p><ul><li>这种方法只适用于在一个地方使用的SVG。多次使用会导致资源密集型维护（resource-intensive maintenance）。</li><li>额外的 SVG 代码会增加HTML文件的大小。</li><li>浏览器不能像缓存普通图片一样缓存内联SVG。</li><li>您可能会在<code>&lt;foreignObject&gt;</code> 元素中包含回退，但支持 SVG 的浏览器仍然会下载任何后备图像。你需要考虑仅仅为支持过时的浏览器，而增加额外开销是否真的值得。</li></ul><h2 id="插入方式3">插入方式3</h2><p>使用<code>iframe</code>，这里提供了一种想法，但这一定不是一个好主意。</p><div class="sourceCode" id="cb11"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb11-1"><a href="#cb11-1"></a><span class="kw">&lt;iframe</span><span class="ot"> src=</span><span class="st">"triangle.svg"</span><span class="ot"> width=</span><span class="st">"500"</span><span class="ot"> height=</span><span class="st">"500"</span><span class="ot"> sandbox</span><span class="kw">&gt;</span></span><span id="cb11-2"><a href="#cb11-2"></a>    <span class="kw">&lt;img</span><span class="ot"> src=</span><span class="st">"triangle.png"</span><span class="ot"> alt=</span><span class="st">"Triangle with three unequal sides"</span> <span class="kw">/&gt;</span></span><span id="cb11-3"><a href="#cb11-3"></a><span class="kw">&lt;/iframe&gt;</span></span></code></pre></div><h1 id="响应式图片">响应式图片</h1><p>网页图片在电脑上看着不错，但到手机上因为屏幕大小发生了改变，我们希望图像的大小也随之发生变化，即响应式开发。</p><h2 id="创建响应式的图片">创建响应式的图片</h2><p>也可以使用CSS重建，但这里专注于HTML的<code>&lt;img&gt;</code>。</p><div class="sourceCode" id="cb12"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb12-1"><a href="#cb12-1"></a><span class="kw">&lt;img</span><span class="ot"> srcset=</span><span class="st">"elva-fairy-320w.jpg 320w,</span></span><span id="cb12-2"><a href="#cb12-2"></a><span class="st">             elva-fairy-480w.jpg 480w,</span></span><span id="cb12-3"><a href="#cb12-3"></a><span class="st">             elva-fairy-800w.jpg 800w"</span></span><span id="cb12-4"><a href="#cb12-4"></a><span class="ot">     sizes=</span><span class="st">"(max-width: 320px) 280px,</span></span><span id="cb12-5"><a href="#cb12-5"></a><span class="st">            (max-width: 480px) 440px,</span></span><span id="cb12-6"><a href="#cb12-6"></a><span class="st">            800px"</span></span><span id="cb12-7"><a href="#cb12-7"></a><span class="ot">     src=</span><span class="st">"elva-fairy-800w.jpg"</span><span class="ot"> alt=</span><span class="st">"Elva dressed as a fairy"</span><span class="kw">&gt;</span></span></code></pre></div><ul><li>srcset定义了我们允许浏览器选择的图像集，以及每个图像的大小，使用逗号分隔每个图像，而使用空格隔开文件名和固有宽度。</li><li>sizes定义了一组媒体条件（例如屏幕宽度）并且指明当某些媒体条件为真时，什么样的图片尺寸是最佳选择—我们在之前已经讨论了一些提示。没有写媒体条件的选项表示其他都不符合时，选择此。</li></ul><blockquote><p><strong>这里关于w单位的图片大小我并没有找到...??</strong></p></blockquote><blockquote><p>注意: 在 HTML 文件中的 <code>&lt;head&gt;</code> 标签里， 你将会找到这一行代码 <code>&lt;meta name="viewport" content="width=device-width"&gt;</code>: 这行代码会强制地让手机浏览器采用它们真实可视窗口的宽度来加载网页（有些手机浏览器会提供不真实的可视窗口宽度, 然后加载比浏览器真实可视窗口的宽度大的宽度的网页，然后再缩小加载的页面，这样的做法对响应式图片或其他设计，没有任何帮助。我们会在未来的模块教给你更多关于这方面的知识）。</p></blockquote><p>当屏幕尺寸相同，但希望在不同分辨率上显示不同大小的图片，则使用下面的语法：</p><div class="sourceCode" id="cb13"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb13-1"><a href="#cb13-1"></a><span class="kw">&lt;img</span><span class="ot"> srcset=</span><span class="st">"elva-fairy-320w.jpg,</span></span><span id="cb13-2"><a href="#cb13-2"></a><span class="st">             elva-fairy-480w.jpg 1.5x,</span></span><span id="cb13-3"><a href="#cb13-3"></a><span class="st">             elva-fairy-640w.jpg 2x"</span></span><span id="cb13-4"><a href="#cb13-4"></a><span class="ot">     src=</span><span class="st">"elva-fairy-640w.jpg"</span><span class="ot"> alt=</span><span class="st">"Elva dressed as a fairy"</span><span class="kw">&gt;</span></span></code></pre></div><h2 id="美术设计问题">美术设计问题</h2><p>另一个问题：有一张宽屏、大的、横向图片，在电脑上显示的很好，但当来到收集，图像会被缩小，里面的人物无法很好的显示，最好的方式是在此时使用一张小的肖像图来替代，怎么做到？</p><div class="sourceCode" id="cb14"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb14-1"><a href="#cb14-1"></a><span class="kw">&lt;picture&gt;</span></span><span id="cb14-2"><a href="#cb14-2"></a>  <span class="kw">&lt;source</span><span class="ot"> media=</span><span class="st">"(max-width: 799px)"</span><span class="ot"> srcset=</span><span class="st">"elva-480w-close-portrait.jpg"</span><span class="kw">&gt;</span></span><span id="cb14-3"><a href="#cb14-3"></a>  <span class="kw">&lt;source</span><span class="ot"> media=</span><span class="st">"(min-width: 800px)"</span><span class="ot"> srcset=</span><span class="st">"elva-800w.jpg"</span><span class="kw">&gt;</span></span><span id="cb14-4"><a href="#cb14-4"></a>  <span class="kw">&lt;img</span><span class="ot"> src=</span><span class="st">"elva-800w.jpg"</span><span class="ot"> alt=</span><span class="st">"Chris standing up holding his daughter Elva"</span><span class="kw">&gt;</span></span><span id="cb14-5"><a href="#cb14-5"></a><span class="kw">&lt;/picture&gt;</span></span></code></pre></div><p>上述使用的<code>img</code>是在浏览器不支持<code>picture</code>时的一个备选方案。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MDN学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML基础</title>
      <link href="/2020/05/13/html-ji-chu/"/>
      <url>/2020/05/13/html-ji-chu/</url>
      
        <content type="html"><![CDATA[<p><strong>HTML (HyperText Markup Language)</strong> 不是一门编程语言，而是一种用来告知浏览器如何组织页面的标记语言。HTML 可复杂、可简单，一切取决于开发者。它由一系列的<strong>元素（elements）</strong>组成，这些元素可以用来包围不同部分的内容，使其以某种方式呈现或者工作。</p><h1 id="html元素">HTML元素</h1><h2 id="html元素的分类">HTML元素的分类</h2><ul><li><p>块级元素</p><p>其可以包含块级元素或内联元素；但不能被内联元素包含。</p></li><li><p>内联元素</p><p>通常出现在块级元素中，可以包含另一个内联元素。</p></li><li><p>空元素 （Empty elements、void elements）</p><p>只有开始标签而没有结束标签的元素，因为其不需要包裹内容，所以去掉了结束标签。</p><p>如：<code>br</code>、<code>img</code>、<code>hr</code>等。</p></li></ul><blockquote><p>实际上这里的“块”和“内联”，和CSS boxes模型中定义的display同名术语不是一个东西（尽管它们两者之间关系非常密切），改变其CSS display值并不会改变此元素的分类，<strong>更不会改变其可以包含和被包含的元素类型</strong>。</p></blockquote><blockquote><p>所以HTML5中改变了其分类的标准（但新的分类太复杂难懂了，:)）。</p></blockquote><h2 id="html元素的属性">HTML元素的属性</h2><ul><li><p>布尔属性：有时候不需要值的属性，其存在代表属性值为<code>true</code>； <img src="/2020/05/13/html-ji-chu/HTML基础_2020-05-13-19-12-41.png"></p></li><li><p>使用属性时，其值需要用引号引起来，双引号和单引号都可以，但必须统一，嵌套引号时需要使用不同类型的引号；</p></li></ul><h2 id="html实体引用">HTML实体引用</h2><p>就是使用字符引用来生成构筑元素标签的特殊字符（都是用<code>&amp;</code>和<code>;</code>包裹形成的）：</p><ul><li><code>&lt;</code> == <code>&amp;lt;</code></li><li><code>&gt;</code> == <code>&amp;gt;</code></li><li><code>"</code> == <code>&amp;quot;</code></li><li><code>'</code> == <code>&amp;apos;</code></li><li><code>&amp;</code> == <code>&amp;amp;</code></li></ul><p><a href="http://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references" target="_blank" rel="noopener">wiki上的XML和HTML的字符实体引用列表</a>。</p><h1 id="html中的元数据meta-data">HTML中的元数据（meta-data）</h1><p>meta-data是放在<code>&lt;head&gt;</code>中的元素。</p><p>一般使用vscode会自动创建补充：</p><ol class="example" type="1"><li><code>&lt;title&gt;</code>，是页面标签上的文本；</li><li><code>&lt;meta charset="UTF-8"&gt;</code></li></ol><p>我们还可以添加：</p><ol start="3" class="example" type="1"><li><code>&lt;meta name="author" content="Chris Mills"&gt;</code></li><li><code>&lt;meta name="description" content="The MDN Learning Area aims to provide ..."&gt;</code></li></ol><p>以上4个元素可以被搜索引擎捕获，并可能会让页面出现在相关搜索中的次数更多（SEO）。</p><ol start="5" class="example" type="1"><li><code>&lt;link rel="shortcut icon" href="favicon.ico" type="image/x-icon"&gt;</code>，来增加自定义图标，当然可以增加多个，来针对不同的设备</li><li><code>&lt;link rel="stylesheet" href="my-css-file.css"&gt;</code>，来增加css文件的引用</li><li><del><code>&lt;script src="my-js-file.js"&gt;&lt;/script&gt;</code>，引入js文件，但这个一般来说不放在头部，而是放在页面的最后（<code>&lt;/body&gt;</code>前面），这有利于页面的快速加载。</del></li></ol><p>另外还有一个并不是放在<code>&lt;header&gt;</code>内的属性，<code>&lt;html lang="zh-CN"&gt;</code>，当然，这个属性可以设置到其他文本标签（比如<code>p</code>、<code>span</code>）中，来只改变一部分文本的语言。</p><h1 id="html链接">HTML链接</h1><ol type="1"><li>记得添加<code>title</code>属性，这是支持信息，有益于有视觉障碍的读者使用；</li><li>尽量使用相对路径；</li><li>下载的时候，可以使用<code>download</code>属性来指定默认的保存文件名；</li></ol><h1 id="html文本">HTML文本</h1><p>结构化。</p><p>最重要的：<strong>语义化</strong>。</p><p>一些高级文本元素：</p><ol type="1"><li><p>描述列表（description list）：</p><p><code>&lt;dl&gt;&lt;dt&gt;&lt;dd&gt;</code></p></li><li><p>引用：</p><p>块引用：<code>&lt;blockquote cite="本段内容引用的资源"&gt;</code> 行内引用：<code>&lt;q&gt;</code>，渲染时会加上引号</p></li><li><p>缩略语：</p><p><code>&lt;abbr title="全称"&gt;</code></p></li><li><p>标记地址：</p><p><code>&lt;address&gt;</code></p></li><li><p>上标和下标：</p><p><code>sup</code>和<code>sub</code></p></li><li><p>展现计算机代码：</p><ul><li><code>code</code>：标记计算机通用代码；</li><li><code>pre</code>：在此元素内的文本，其多余的空格和缩进会被保留；</li><li><code>var</code>：来包裹一个变量名（效果其实和斜体差不多）；</li><li><code>kbd</code>：用来标记键盘输入（比如<code>Ctrl</code>、<code>Shift</code>等等）；</li><li><code>samp</code>：标记程序的输出；</li></ul><p>一般代码使用<code>&lt;pre&gt;&lt;code&gt;...&lt;/code&gt;&lt;/pre&gt;</code>包裹，然后再用其他的来修饰。</p></li><li><p>日期和时间：</p><p><code>&lt;time date="2020-01-01"&gt;2020年一月一日&lt;/time&gt;</code></p><p>便于计算机处理，这样不论文本是什么样的格式，都可以被计算机识别。</p></li></ol><h1 id="html文档架构">HTML文档架构</h1><p>基于语义化的要求，还有一些用来布局的专用的块级标签，这里结合一个常用的布局来进行解释：</p><p><img src="/2020/05/13/html-ji-chu/HTML基础_2020-05-13-22-40-28.png"></p><p>以上是MDN练习的一个网站，其可以分为以下几个部分：</p><ul><li>页眉：主要包含页面的标题和标志，同一个网站的不同网页一般会有相同的页眉，使用元素<code>&lt;header&gt;</code>来标记；</li><li>（导航栏）：有时候是单独列出来，有时候是放在页眉里面，导航栏在同一个网站的不同页面间应该也是一致的，使用元素<code>&lt;nav&gt;</code>来标记；</li><li>主内容：当前网页的主要内容，视频、文章、地图、新闻等等，不同网页不一样，使用元素<code>&lt;main&gt;</code>来标记；<ul><li>一个页面的内容可能被再进行分割，比如一个页面可以放置多篇文章（则每一篇文章都使用<code>&lt;article&gt;</code>来标记），或者页面里有多个部分的内容（则每一部分可以使用<code>&lt;secton&gt;</code>来标记），或者两者都存在，或者可能存在嵌套；</li><li>有可能每个<code>&lt;article&gt;</code>或<code>&lt;section&gt;</code>都有自己的<code>&lt;header&gt;</code>；</li></ul></li><li>（侧边栏），可以是主内容的一部分，也可以不是（一般是在<code>&lt;main&gt;</code>里面的），放在两侧，可以是一些广告、相关链接、外围信息、目录、作者简介、属于条目等，一般来说和主内容有关联，也可以在不同页面间保持重复，使用元素<code>&lt;aside&gt;</code>来标记；</li><li>页脚，底部的狭长区域，一般和标题一样，用来放置公共信息（版权声明或联系方式等），一般使用较小字体，使用<code>&lt;footer&gt;</code>来标记；</li></ul><p>可能有时候，现有的语义标签无法满足我们的要求，则可以使用<code>&lt;div&gt;</code>和<code>&lt;span&gt;</code>这两个无语义的标签，配合<code>class</code>属性来标记，但注意，这两个元素应尽量少用。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MDN学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客搭建</title>
      <link href="/2020/05/10/blog-build/"/>
      <url>/2020/05/10/blog-build/</url>
      
        <content type="html"><![CDATA[<p>自己在学习的过程中，积累了大量的学习材料和笔记。对于增量学习过程，这些学习材料和笔记应该得到较好的组织，而且有些内容很容易因为不常使用而忘记。所以将其进行有条理的整理，便于进行随时查阅，是非常有必要的。</p><p>显然，搭建一个个人博客是一个比较合适的选择。我希望我的个人博客能够满足下面的特点：</p><ul><li>漂亮，好看，逼格满满。</li><li>拥有足够的表现力，可以满足我的多种需求（比如学习笔记、论文笔记等）。</li><li>可以自动化处理多种格式的文件（比如<code>.ipynb</code>和<code>.Rmd</code>，这些文件是我学习python和R时常使用的格式）。</li><li>可以进行自定义修改。</li></ul><p>经过一番的折腾，我选择了vscode + Hexo + pandoc + github page + 脚本辅助的模式。我希望它能够满足我的以上的需求：</p><ul><li>vscode借助其各种插件（vim、Paste Image等）可以实现舒适的文本编辑体验。</li><li>Hexo有各种漂亮的主题，简单的操作就可以定制化一个漂亮的个人博客；Hexo也有各种js脚本制作的插件，可以实现更多的功能以（字数统计、词云、插入音乐等）。</li><li>pandoc版的markdown拥有比传统markdown更多的语法，更强的表现力。</li><li>github page提供了免费的静态网页托管站点，而且依托其issue还可以增加评论功能。</li><li>通过python、js等脚本语言，可以进一步扩宽Hexo的功能（编写新的Hexo脚本），这样我们可以将更多类型的文本整合到博客系统中，并且进行高度的自定义。</li></ul><p>现在，我将我搭建博客的全过程进行记录，以便于发现问题和总结，并探索一个快速的、可重复的操作步骤。</p><h1 id="第一部分-依赖安装">第一部分 依赖安装</h1><h2 id="git安装">1. git安装</h2><p>对于linux系统，使用root权限下的包管理器安装即可；对于windows，使用可执行安装文件，一步一步根据引导即可完成安装。</p><h2 id="node.js安装">2. node.js安装</h2><p>如果是windows系统，同样使用引导界面安装即可。</p><p>如果是linux系统，除了使用包管理器安装以外，还可以使用下面的方式（不需要root权限，便于管理）:</p><ol type="1"><li>从<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">node官网</a>中下载linux的2进制安装包；</li><li><code>tar -Jxvf node-v12.16.3-linux-x64.tar.xz</code>，解压；</li><li>（创建<code>.local/bin</code>，没有必要将这个路径加入到环境变量中，其默认就在环境变量中），将<code>bin/node</code>（别忘了<code>npm</code>和<code>npx</code>）软连接到<code>.local/bin</code>中；</li><li><code>node -v</code>查看是否成功。</li></ol><h2 id="hexo安装">3. Hexo安装</h2><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo</a>依赖于<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">git</a>和<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">node.js</a>，其作为node.js的一个软件包存在的，可以使用npm进行安装管理。</p><blockquote><p>这里需要介绍以下<code>npm</code>的规则，其默认是局部安装模式。如果使用全局安装模式（<code>-g</code>），则相关内容会被安装到<code>prefix/lib/node_modules</code>中（可以使用<code>npm help npm</code>来查看，windows是在C盘下面）。如果是局部安装模式，则相关内容会被安装到当前的文件夹下的node_modules中。</p></blockquote><p>为了提高npm的安装速度，可以<a href="https://blog.csdn.net/quuqu/article/details/64121812" target="_blank" rel="noopener">设置一下淘宝镜像</a>或使用<a href="https://developer.aliyun.com/mirror/NPM" target="_blank" rel="noopener"><code>cnpm</code></a>，然后全局安装hexo-cli（全局安装可以使得我们在任何位置使用<code>hexo</code>命令）：</p><div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1"></a><span class="ex">npm</span> config set registry https://registry.npm.taobao.org</span><span id="cb1-2"><a href="#cb1-2"></a><span class="ex">npm</span> install hexo-cli -g</span></code></pre></div><p>注意，如果在linux上解压二进制安装包安装的node.js，则其全局安装位置可能并不在环境变量中，需要手动再将<code>hexo</code>加入环境变量才好使用。</p><h2 id="pandoc部分">4. Pandoc部分</h2><p>其安装和node.js的安装方式类似，比照其安装即可。</p><h2 id="vscode">5. vscode</h2><p>vscode的安装不再赘述，这里侧重于工作流程、配置和一些好用的插件。</p><p>整个工作流程可以是这样的：</p><ol type="1"><li>直接在<code>_posts</code>文件夹下创建工作环境，编辑markdown文件，需要导入图片的时候，就在其同级目录下创建一个同名文件夹，将图片放入其中来引用即可（使用<a href="https://marketplace.visualstudio.com/items?itemName=mushan.vscode-paste-image" target="_blank" rel="noopener">Paste Image</a>插件可以自动创建这个目录）。</li><li>因为所有的markdown文件都必须在<code>_post</code>目录下，所以为了容易区分，文件命名很重要，可以使用<code>-</code>来增加可读性，比如关于pytorch的学习可以使用<code>python-pytorch-xx</code>、论文的阅读总结可以使用<code>paper-xx</code>。</li></ol><h2 id="paste-image">5.1 <a href="https://marketplace.visualstudio.com/items?itemName=mushan.vscode-paste-image" target="_blank" rel="noopener">Paste Image</a></h2><p>其作用是可以将剪切板中的图片直接放入markdown中（快捷键为C-A-v），并保存到指定的文件夹下。我对此插件进行了下列配置：</p><ol type="1"><li>保存剪切板图片的时候，使用当前正在编辑的文件的名称作为图片文件名称的前缀，使用时间作为其名称的主题；</li><li>设置其保存路径为当前文件同级目录下的同名文件夹；</li><li>在保存图片的时候，会出现vscode input box，从而可以更改路径； <img src="/2020/05/10/blog-build/BlogBuild_2020-05-10-18-03-00.png" alt="PasteImage的配置"></li></ol><h1 id="第二部分-配置博客">第二部分 配置博客</h1><p>本次博客配置使用的主题为<a href="https://github.com/blinkfox/hexo-theme-matery.git" target="_blank" rel="noopener">hexo-theme-matery</a>，其有比较全面的<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md" target="_blank" rel="noopener">中文配置说明</a>。另外，博客的配置还参考了两位大佬 -- <a href="https://zhuanlan.zhihu.com/p/35668237" target="_blank" rel="noopener">godweiyang</a>和<a href="https://qinnian.xyz/CreateBlog.html" target="_blank" rel="noopener">钦の念</a>的配置过程，受益匪浅。</p><p>另外，在配置过程中，为了添加更多的功能，安装了众多的hexo插件，这些插件都集中记录在此：</p><div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1"></a><span class="co"># --save表示安装使用依赖</span></span><span id="cb2-2"><a href="#cb2-2"></a><span class="ex">npm</span> install hexo-deployer-git --save           <span class="co"># 用于进行git部署</span></span><span id="cb2-3"><a href="#cb2-3"></a><span class="ex">npm</span> install hexo-wordcount --save              <span class="co"># 统计文章字数</span></span><span id="cb2-4"><a href="#cb2-4"></a><span class="ex">npm</span> install gitalk --save                      <span class="co"># gitalk评论系统</span></span><span id="cb2-5"><a href="#cb2-5"></a><span class="ex">npm</span> install valine --save                      <span class="co"># valine评论系统</span></span><span id="cb2-6"><a href="#cb2-6"></a><span class="ex">npm</span> install hexo-prism-plugin --save           <span class="co"># 代码高亮</span></span><span id="cb2-7"><a href="#cb2-7"></a><span class="ex">npm</span> install hexo-generator-search --save       <span class="co"># 搜索</span></span><span id="cb2-8"><a href="#cb2-8"></a><span class="ex">npm</span> install hexo-permalink-pinyin --save       <span class="co"># 汉字转拼音</span></span><span id="cb2-9"><a href="#cb2-9"></a><span class="ex">npm</span> install hexo-filter-github-emojis --save   <span class="co"># emojis表情</span></span><span id="cb2-10"><a href="#cb2-10"></a><span class="ex">npm</span> install hexo-generator-feed --save         <span class="co"># RSS订阅</span></span><span id="cb2-11"><a href="#cb2-11"></a><span class="ex">npm</span> install https://github.com/xcodebuild/hexo-asset-image --save</span><span id="cb2-12"><a href="#cb2-12"></a><span class="ex">npm</span> install hexo-renderer-pandoc --save</span><span id="cb2-13"><a href="#cb2-13"></a><span class="ex">npm</span> install hexo-helper-live2d --save          <span class="co"># 动画人物支持</span></span><span id="cb2-14"><a href="#cb2-14"></a><span class="ex">npm</span> install live2d-widget-model-shizuku --save <span class="co"># 动画人物支持</span></span><span id="cb2-15"><a href="#cb2-15"></a><span class="ex">npm</span> install hexo-generator-sitemap --save      <span class="co"># 添加站点地图</span></span><span id="cb2-16"><a href="#cb2-16"></a><span class="ex">npm</span> install hexo-lazyload-image --save         <span class="co"># 图片懒加载</span></span></code></pre></div><h2 id="创建站点">1. 创建站点</h2><ol type="1"><li>在站点文件夹下使用<code>hexo init</code>命令；</li><li>别忘了使用<code>npm install</code>来安装一些必要的组件；</li><li>现在可以通过<code>npm g &amp;&amp; npm s</code>来打开本地服务器，然后连接<code>http://localhost:4000/</code>来查看是否成功： <img src="/2020/05/10/blog-build/BlogBuild_2020-05-11-14-10-23.png" alt="页面效果"></li></ol><h2 id="博客部署至github">2. 博客部署至github</h2><ol type="1"><li><p>创建一个名为<code>luyiyun.github.io</code>的repository；</p></li><li><p>配置SSH key（为了不用每次都输密码）；</p></li><li><p>安装<code>hexo-deployer-git</code>插件，更改博客<code>_config.yml</code>文件，添加deploy项： <img src="/2020/05/10/blog-build/BlogBuild_2020-05-11-14-12-51.png" alt="添加deploy配置"></p></li><li><p>运行以下的命令：</p><div class="sourceCode" id="cb3"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1"></a><span class="ex">hexo</span> clean <span class="kw">&amp;&amp;</span> <span class="ex">hexo</span> g <span class="kw">&amp;&amp;</span> <span class="ex">hexo</span> d</span></code></pre></div><p>然后打开<code>luyiyun.github.io</code>，看是否部署成功： <img src="/2020/05/10/blog-build/BlogBuild_2020-05-11-14-19-05.png" alt="部署成功"></p></li></ol><p>以上在<a href="https://qinnian.xyz/CreateBlog.html" target="_blank" rel="noopener">钦の念</a>的博客中有更加详细的叙述。</p><h2 id="申请个人域名">2. 申请个人域名</h2><ol type="1"><li><p>申请一个新的域名<code>luyiyun.online</code>（腾讯云），别忘了添加一条解析记录使之能够正常解析；</p></li><li><p>在<code>/source</code>目录下，新建<code>CNAME</code>文件，然后写上域名，保存，然后<code>hexo g &amp;&amp; hexo d</code>部署；</p></li><li><p><code>CNAME</code>文件会被放到<code>public</code>中并一并上传到github上；</p></li><li><p>查看repository的settings，发现以下结果，代表可正常使用： <img src="/2020/05/10/blog-build/BlogBuild_2020-05-11-14-38-16.png" alt="个人域名配置成功"></p></li><li><p>可以使用这个域名来打开看看了： <img src="/2020/05/10/blog-build/BlogBuild_2020-05-11-14-39-38.png" alt="个人域名解析成功"></p></li></ol><h2 id="博客配置文件">3. 博客配置文件</h2><p>博客的配置文件是根目录下的<code>_config.yml</code>，现在我们对其中的内容依次进行处理：</p><ol type="1"><li><p>站点基本信息配置： <img src="/2020/05/10/blog-build/BlogBuild_2020-05-11-14-43-06.png" alt="site"></p></li><li><p>网站的url： <img src="/2020/05/10/blog-build/BlogBuild_2020-05-11-14-44-21.png" alt="url"></p></li><li><p>分页，设置这个是为了适配<a href="https://github.com/blinkfox/hexo-theme-matery.git" target="_blank" rel="noopener">hexo-theme-matery</a>： <img src="/2020/05/10/blog-build/BlogBuild_2020-05-11-14-46-33.png" alt="per_page"></p></li><li><p>主题，这里使用<a href="https://github.com/blinkfox/hexo-theme-matery.git" target="_blank" rel="noopener">hexo-theme-matery</a>： <img src="/2020/05/10/blog-build/BlogBuild_2020-05-11-14-48-13.png" alt="theme"></p><blockquote><p>我们在<code>/themes</code>文件夹下使用git来下载该主题：</p><div class="sourceCode" id="cb4"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb4-1"><a href="#cb4-1"></a><span class="fu">git</span> clone https://github.com/blinkfox/hexo-theme-matery.git</span></code></pre></div></blockquote></li><li><p>代码高亮，使用<code>hexo-prism-plugin</code>，并在<code>_config.yml</code>中加入以下内容： <img src="/2020/05/10/blog-build/BlogBuild_2020-05-11-17-50-24.png" alt="hightlight"></p><blockquote><p>前面有默认有<code>highlight: enable</code>的配置，所以这两个只保留一个即可。</p></blockquote></li><li><p>搜索，使用<code>hexo-generator-search</code>插件，并在配置文件中加入： <img src="/2020/05/10/blog-build/BlogBuild_2020-05-11-17-52-45.png" alt="search"></p></li><li><p>中文链接转拼音，使用<code>hexo-permalink-pinyin</code>： <img src="/2020/05/10/blog-build/BlogBuild_2020-05-11-17-54-47.png" alt="pinyin"></p></li><li><p>添加对<code>emoji</code>表情的支持，<code>hexo-filter-github-emojis</code> <img src="/2020/05/10/blog-build/BlogBuild_2020-05-11-17-56-43.png" alt="emoji"></p></li><li><p>添加RSS订阅支持，<code>hexo-generator-feed</code>， <img src="/2020/05/10/blog-build/BlogBuild_2020-05-11-17-58-22.png" alt="RSS"></p><p>出现下面情况，说明RSS配置成功： <img src="/2020/05/10/blog-build/BlogBuild_2020-05-11-18-12-25.png" alt="RSS-OK"></p></li><li><p>图片路径改为绝对路径，需要安装<code>hexo-asset-image</code>，并将<code>post_asset_folder</code>改为<code>true</code>。</p><blockquote><p>设置<code>_config.yml</code>中的<code>post_asset_folder: true</code>，这意味着使用<code>hexo new &lt;blog&gt;</code>时，在<code>_posts</code>中不只生成了一个md文件，而且还出现了一个同名文件夹，用来放md文件引用的内容。<del>我们可以在md文件中使用<code>![](name.jpg)</code>来引入图片。</del>但我们不会这样做，因为如此引入图片，在编写博客的时候是无法预览的，我们应该使用<code>![](&lt;blog&gt;/name.jpg)</code>的格式来引入。该插件使得我们就算这样引入图片，hexo也可以正确读取并处理它。</p></blockquote></li><li><p>安装<code>hexo-renderer-pandoc</code>，提供pandoc语法支持。</p></li><li><p>添加动漫人物，需要安装两个插件，并在根目录配置文件中添加下面的配置：</p><div class="sourceCode" id="cb5"><pre class="sourceCode yml"><code class="sourceCode yaml"><span id="cb5-1"><a href="#cb5-1"></a><span class="fu">live2d</span><span class="kw">:</span></span><span id="cb5-2"><a href="#cb5-2"></a><span class="at">    </span><span class="fu">enable</span><span class="kw">:</span><span class="at"> </span><span class="ch">true</span></span><span id="cb5-3"><a href="#cb5-3"></a><span class="at">    </span><span class="fu">scriptFrom</span><span class="kw">:</span><span class="at"> local</span></span><span id="cb5-4"><a href="#cb5-4"></a><span class="at">    </span><span class="fu">pluginRootPath</span><span class="kw">:</span><span class="at"> live2dw/</span></span><span id="cb5-5"><a href="#cb5-5"></a><span class="at">    </span><span class="fu">pluginJsPath</span><span class="kw">:</span><span class="at"> lib/</span></span><span id="cb5-6"><a href="#cb5-6"></a><span class="at">    </span><span class="fu">pluginModelPath</span><span class="kw">:</span><span class="at"> assets/</span></span><span id="cb5-7"><a href="#cb5-7"></a><span class="at">    </span><span class="fu">tagMode</span><span class="kw">:</span><span class="at"> </span><span class="ch">false</span></span><span id="cb5-8"><a href="#cb5-8"></a><span class="at">    </span><span class="fu">log</span><span class="kw">:</span><span class="at"> </span><span class="ch">false</span></span><span id="cb5-9"><a href="#cb5-9"></a><span class="at">    </span><span class="fu">model</span><span class="kw">:</span></span><span id="cb5-10"><a href="#cb5-10"></a><span class="at">        </span><span class="fu">use</span><span class="kw">:</span><span class="at"> live2d-widget-model-shizuku</span></span><span id="cb5-11"><a href="#cb5-11"></a><span class="at">    </span><span class="fu">display</span><span class="kw">:</span></span><span id="cb5-12"><a href="#cb5-12"></a><span class="at">        </span><span class="fu">position</span><span class="kw">:</span><span class="at"> right</span></span><span id="cb5-13"><a href="#cb5-13"></a><span class="at">        </span><span class="fu">width</span><span class="kw">:</span><span class="at"> </span><span class="dv">150</span></span><span id="cb5-14"><a href="#cb5-14"></a><span class="at">        </span><span class="fu">height</span><span class="kw">:</span><span class="at"> </span><span class="dv">300</span></span><span id="cb5-15"><a href="#cb5-15"></a><span class="at">    </span><span class="fu">mobile</span><span class="kw">:</span></span><span id="cb5-16"><a href="#cb5-16"></a><span class="at">        </span><span class="fu">show</span><span class="kw">:</span><span class="at"> </span><span class="ch">true</span></span><span id="cb5-17"><a href="#cb5-17"></a><span class="at">    </span><span class="fu">react</span><span class="kw">:</span></span><span id="cb5-18"><a href="#cb5-18"></a><span class="at">        </span><span class="fu">opacity</span><span class="kw">:</span><span class="at"> </span><span class="fl">0.7</span></span></code></pre></div></li><li><p>SEO配置</p><p>SEO（Search Engine Optimization），即搜索引擎优化：</p><blockquote><p>搜索引擎优化是一种通过了解搜索引擎的运作规则来调整网站，以及提高目的网站在有关搜索引擎内排名的方式。</p></blockquote><ol type="a"><li><p>验证网站。如果在谷歌搜索<code>site:luyiyun.online</code>查不到，这说明未被收录，则需要前往Google Search Console，进行验证： <img src="/2020/05/10/blog-build/BlogBuild_2020-05-11-18-53-12.png" alt="gsc"></p><p>方式和添加解析是一样，在腾讯云的控制台，添加DNS解析记录即可，其中记录值使用Google Search Console提供的值： <img src="/2020/05/10/blog-build/BlogBuild_2020-05-11-18-55-35.png" alt="gsc2"></p><p>等待几分钟后，在Google Search Console中进行验证，通过即可。</p></li><li><p>添加站点地图作用是告诉搜索引擎你的网站结构等信息，让搜索引擎更智能抓取内容。需要安装<code>hexo-generator-sitemap</code>插件，并在根目录的配置文件下添加： <img src="/2020/05/10/blog-build/BlogBuild_2020-05-11-18-59-19.png" alt="sitemap"></p></li><li><p>当<code>hexo g</code>后，public中出现了<code>sitemap.xml</code>文件。我们可以再进入Google Search Console，然后把这个站点地图（是这个sitemap文件）添加进去， <img src="/2020/05/10/blog-build/BlogBuild_2020-05-11-19-10-01.png" alt="sitemap2"></p></li><li><p>简化路径： <img src="/2020/05/10/blog-build/BlogBuild_2020-05-11-19-12-03.png" alt="path"></p></li></ol></li></ol><h2 id="新建主题文章模板">4. 新建主题文章模板</h2><p>建议将<code>/scaffolds/post.md</code>修改至：</p><div class="sourceCode" id="cb6"><pre class="sourceCode markdown"><code class="sourceCode markdown"><span id="cb6-1"><a href="#cb6-1"></a><span class="co">---</span></span><span id="cb6-2"><a href="#cb6-2"></a><span class="an">title:</span><span class="co"> Hexo博客搭建</span></span><span id="cb6-3"><a href="#cb6-3"></a><span class="an">date:</span><span class="co"> 1589105282000</span></span><span id="cb6-4"><a href="#cb6-4"></a><span class="an">author:</span><span class="co"> Lu Yiyun</span></span><span id="cb6-5"><a href="#cb6-5"></a><span class="an">img:</span><span class="co"> "文章特色图，空则hexo-theme-matery自动进行填补"</span></span><span id="cb6-6"><a href="#cb6-6"></a><span class="an">coverImg:</span><span class="co"> "文章在首页轮播封面时显示的图片，默认使用文章特色图"</span></span><span id="cb6-7"><a href="#cb6-7"></a><span class="an">top:</span><span class="co"> true</span></span><span id="cb6-8"><a href="#cb6-8"></a><span class="an">cover:</span><span class="co"> true</span></span><span id="cb6-9"><a href="#cb6-9"></a><span class="an">toc:</span><span class="co"> true</span></span><span id="cb6-10"><a href="#cb6-10"></a><span class="an">mathjax:</span><span class="co"> true</span></span><span id="cb6-11"><a href="#cb6-11"></a><span class="an">summary:</span><span class="co"> "自定义文章的摘要，不然自动从文章正文中吸取"</span></span><span id="cb6-12"><a href="#cb6-12"></a><span class="an">categories:</span></span><span id="cb6-13"><a href="#cb6-13"></a><span class="co">  - A</span></span><span id="cb6-14"><a href="#cb6-14"></a><span class="co">  - B</span></span><span id="cb6-15"><a href="#cb6-15"></a><span class="an">tags:</span></span><span id="cb6-16"><a href="#cb6-16"></a><span class="co">  - a</span></span><span id="cb6-17"><a href="#cb6-17"></a><span class="co">  - b</span></span><span id="cb6-18"><a href="#cb6-18"></a><span class="an">keywords:</span></span><span id="cb6-19"><a href="#cb6-19"></a><span class="co">---</span></span></code></pre></div><h2 id="新建工具页面">5. 新建工具页面</h2><div class="sourceCode" id="cb7"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb7-1"><a href="#cb7-1"></a><span class="ex">hexo</span> new page <span class="st">"categories"</span></span><span id="cb7-2"><a href="#cb7-2"></a><span class="ex">hexo</span> new page <span class="st">"tags"</span></span><span id="cb7-3"><a href="#cb7-3"></a><span class="ex">hexo</span> new page <span class="st">"about"</span></span><span id="cb7-4"><a href="#cb7-4"></a><span class="ex">hexo</span> new page <span class="st">"contact"</span></span><span id="cb7-5"><a href="#cb7-5"></a><span class="ex">hexo</span> new page <span class="st">"friends"</span></span></code></pre></div><p>并都将其中的<code>index.md</code>文件改写为以下格式：</p><pre><code>---title: categoriesdate: 2020-05-10 13:25:48type: "categories"layout: "categories"---</code></pre><p>然后手动再<code>/source/</code>下创建一个<code>404.md</code>，并填写一下内容：</p><div class="sourceCode" id="cb9"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb9-1"><a href="#cb9-1"></a><span class="ex">---</span></span><span id="cb9-2"><a href="#cb9-2"></a><span class="ex">title</span>: 404</span><span id="cb9-3"><a href="#cb9-3"></a><span class="ex">date</span>: 2019-07-19 16:41:10</span><span id="cb9-4"><a href="#cb9-4"></a><span class="ex">type</span>: <span class="st">"404"</span></span><span id="cb9-5"><a href="#cb9-5"></a><span class="ex">layout</span>: <span class="st">"404"</span></span><span id="cb9-6"><a href="#cb9-6"></a><span class="ex">description</span>: <span class="st">"你来到了没有知识的荒原 :("</span></span><span id="cb9-7"><a href="#cb9-7"></a><span class="ex">---</span></span></code></pre></div><p>并在<code>/themes/hexo-theme-matery/layout/</code>下新建<code>404.ejs</code>，并添加以下内容：</p><div class="sourceCode" id="cb10"><pre class="sourceCode js"><code class="sourceCode javascript"><span id="cb10-1"><a href="#cb10-1"></a><span class="op">&lt;</span>style type<span class="op">=</span><span class="st">"text/css"</span><span class="op">&gt;</span></span><span id="cb10-2"><a href="#cb10-2"></a>    <span class="co">/* don't remove. */</span></span><span id="cb10-3"><a href="#cb10-3"></a>    <span class="op">.</span><span class="at">about</span><span class="op">-</span>cover {</span><span id="cb10-4"><a href="#cb10-4"></a>        <span class="dt">height</span><span class="op">:</span> 75vh<span class="op">;</span></span><span id="cb10-5"><a href="#cb10-5"></a>    }</span><span id="cb10-6"><a href="#cb10-6"></a><span class="op">&lt;/</span>style<span class="op">&gt;</span></span><span id="cb10-7"><a href="#cb10-7"></a></span><span id="cb10-8"><a href="#cb10-8"></a><span class="op">&lt;</span>div <span class="kw">class</span><span class="op">=</span><span class="st">"bg-cover pd-header about-cover"</span><span class="op">&gt;</span></span><span id="cb10-9"><a href="#cb10-9"></a>    <span class="op">&lt;</span>div <span class="kw">class</span><span class="op">=</span><span class="st">"container"</span><span class="op">&gt;</span></span><span id="cb10-10"><a href="#cb10-10"></a>        <span class="op">&lt;</span>div <span class="kw">class</span><span class="op">=</span><span class="st">"row"</span><span class="op">&gt;</span></span><span id="cb10-11"><a href="#cb10-11"></a>            <span class="op">&lt;</span>div <span class="kw">class</span><span class="op">=</span><span class="st">"col s10 offset-s1 m8 offset-m2 l8 offset-l2"</span><span class="op">&gt;</span></span><span id="cb10-12"><a href="#cb10-12"></a>                <span class="op">&lt;</span>div <span class="kw">class</span><span class="op">=</span><span class="st">"brand"</span><span class="op">&gt;</span></span><span id="cb10-13"><a href="#cb10-13"></a>                    <span class="op">&lt;</span>div <span class="kw">class</span><span class="op">=</span><span class="st">"title center-align"</span><span class="op">&gt;</span></span><span id="cb10-14"><a href="#cb10-14"></a>                        <span class="dv">404</span></span><span id="cb10-15"><a href="#cb10-15"></a>                    <span class="op">&lt;/</span>div<span class="op">&gt;</span></span><span id="cb10-16"><a href="#cb10-16"></a>                    <span class="op">&lt;</span>div <span class="kw">class</span><span class="op">=</span><span class="st">"description center-align"</span><span class="op">&gt;</span></span><span id="cb10-17"><a href="#cb10-17"></a>                        <span class="op">&lt;%=</span> page<span class="op">.</span><span class="at">description</span> <span class="op">%&gt;</span></span><span id="cb10-18"><a href="#cb10-18"></a>                    <span class="op">&lt;/</span>div<span class="op">&gt;</span></span><span id="cb10-19"><a href="#cb10-19"></a>                <span class="op">&lt;/</span>div<span class="op">&gt;</span></span><span id="cb10-20"><a href="#cb10-20"></a>            <span class="op">&lt;/</span>div<span class="op">&gt;</span></span><span id="cb10-21"><a href="#cb10-21"></a>        <span class="op">&lt;/</span>div<span class="op">&gt;</span></span><span id="cb10-22"><a href="#cb10-22"></a>    <span class="op">&lt;/</span>div<span class="op">&gt;</span></span><span id="cb10-23"><a href="#cb10-23"></a><span class="op">&lt;/</span>div<span class="op">&gt;</span></span><span id="cb10-24"><a href="#cb10-24"></a></span><span id="cb10-25"><a href="#cb10-25"></a><span class="op">&lt;</span>script<span class="op">&gt;</span></span><span id="cb10-26"><a href="#cb10-26"></a>    <span class="co">// 每天切换 banner 图.  Switch banner image every day.</span></span><span id="cb10-27"><a href="#cb10-27"></a>    $(<span class="st">'.bg-cover'</span>)<span class="op">.</span><span class="fu">css</span>(<span class="st">'background-image'</span><span class="op">,</span> <span class="st">'url(/medias/banner/'</span> <span class="op">+</span> <span class="kw">new</span> <span class="bu">Date</span>()<span class="op">.</span><span class="fu">getDay</span>() <span class="op">+</span> <span class="st">'.jpg)'</span>)<span class="op">;</span></span><span id="cb10-28"><a href="#cb10-28"></a><span class="op">&lt;/</span>script<span class="op">&gt;</span></span></code></pre></div><p>这样，我们就添加了一个404页面了。</p><h2 id="主题配置文件">6. 主题配置文件</h2><p>在<code>/themes/hexo-theme-matery</code>下有一个<code>_config.yml</code>文件，用来控制主题的诸多属性。</p><ol type="1"><li><p>第一部分配置菜单导航，icon可以在<a href="https://fontawesome.com/" target="_blank" rel="noopener">Font Awesome</a>中找： <img src="/2020/05/10/blog-build/BlogBuild_2020-05-11-15-18-16.png" alt="theme-menu"></p></li><li><p>站点运行时间： <img src="/2020/05/10/blog-build/BlogBuild_2020-05-11-15-21-03.png" alt="theme-start-time"></p></li><li><p>首页配置，包括封面轮播图、“梦想”和音乐： <img src="/2020/05/10/blog-build/BlogBuild_2020-05-11-15-23-59.png" alt="theme-index"></p></li><li><p>配置logo、favicon： <img src="/2020/05/10/blog-build/BlogBuild_2020-05-11-16-42-12.png" alt="theme-logo"></p></li><li><p>联系方式： <img src="/2020/05/10/blog-build/BlogBuild_2020-05-11-16-44-00.png" alt="theme-link"></p></li><li><p>文章目录设置： <img src="/2020/05/10/blog-build/BlogBuild_2020-05-11-16-45-03.png" alt="theme-toc"></p></li><li><p>代码块部分： <img src="/2020/05/10/blog-build/BlogBuild_2020-05-11-16-45-50.png" alt="theme-code-block"></p></li><li><p>打赏部分，记得替换为自己的二维码： <img src="/2020/05/10/blog-build/BlogBuild_2020-05-11-16-46-43.png" alt="theme-reward"></p></li><li><p>复制时追加版权信息： <img src="/2020/05/10/blog-build/BlogBuild_2020-05-11-16-48-45.png" alt="theme-copyright"></p></li><li><p>激活mathjax： <img src="/2020/05/10/blog-build/BlogBuild_2020-05-11-16-49-25.png" alt="theme-math"></p></li><li><p>开启文章信息，需要安装<code>hexo-wordcount</code>插件： <img src="/2020/05/10/blog-build/BlogBuild_2020-05-11-16-52-08.png" alt="theme-word"></p></li><li><p>"关于"页面的配置： <img src="/2020/05/10/blog-build/BlogBuild_2020-05-11-16-55-47.png" alt="theme-about"></p></li><li><p>评论配置，这里会开启两个评论：基于github issue的gitalk和无后端的valine：</p><ul><li><p>gitalk，安装相关插件<code>gitalk</code>：</p><ol type="a"><li><p>我们需要创建一个新的github repository来储存评论： <img src="/2020/05/10/blog-build/BlogBuild_2020-05-11-17-01-01.png" alt="theme-gitalk1"></p></li><li><p>开启issue功能（默认开启）： <img src="/2020/05/10/blog-build/BlogBuild_2020-05-11-17-02-49.png" alt="theme-gitalk2"></p></li><li><p>注册一个github application： <img src="/2020/05/10/blog-build/BlogBuild_2020-05-11-17-08-21.png" alt="theme-gitalk3"></p><p>并得到Client ID和Client Secret： <img src="/2020/05/10/blog-build/BlogBuild_2020-05-11-17-09-29.png" alt="theme-gitalk4"></p></li><li><p>将这些信息配置到<code>_config.yml</code>文件中： <img src="/2020/05/10/blog-build/BlogBuild_2020-05-11-17-12-25.png" alt="theme-gitalk5"></p></li><li><p>最终效果： <img src="/2020/05/10/blog-build/BlogBuild_2020-05-11-17-22-28.png" alt="theme-gitalk6"> <img src="/2020/05/10/blog-build/BlogBuild_2020-05-11-17-23-05.png" alt="theme-gitalk7"></p></li></ol></li><li><p><a href="https://valine.js.org/quickstart.html" target="_blank" rel="noopener">valine</a>，需要先安装插件<code>valine</code>：</p><ol type="a"><li><p>首先我们需要注册一个LeanCloud账户，并完成实名认证；</p></li><li><p>创建一个应用，然后找到其ID和Key： <img src="/2020/05/10/blog-build/BlogBuild_2020-05-11-17-31-24.png" alt="theme-valine1"></p></li><li><p>将这些信息配置到<code>_config.yml</code>文件中： <img src="/2020/05/10/blog-build/BlogBuild_2020-05-11-17-34-10.png" alt="theme-valine2"></p></li><li><p>效果： <img src="/2020/05/10/blog-build/BlogBuild_2020-05-11-17-36-40.png" alt="theme-valine3"></p></li><li><p>我们可以在LeanCloud中对这些评论进行管理： <img src="/2020/05/10/blog-build/BlogBuild_2020-05-11-17-38-10.png" alt="theme-valine4"></p></li></ol></li></ul></li></ol><h2 id="提高加载速度">7. 提高加载速度</h2><p>可以使用<a href="https://developers.google.com/speed/pagespeed/insights/" target="_blank" rel="noopener">Google PageSpeed Insights</a>来对网站的速度进行测试，并找到其瓶颈所在，其他的各种测速工具可以见<a href="https://qinnian.xyz/CreateBlog.html" target="_blank" rel="noopener">钦の念</a>的博客。</p><h3 id="图片懒加载">7.1 图片懒加载</h3><p>第一种可以提高速度的方式是进行图片的懒加载，安装<code>hexo-lazyload-image</code>，并在站点配置文件中加入：</p><div class="sourceCode" id="cb11"><pre class="sourceCode yml"><code class="sourceCode yaml"><span id="cb11-1"><a href="#cb11-1"></a><span class="fu">lazyload</span><span class="kw">:</span></span><span id="cb11-2"><a href="#cb11-2"></a><span class="fu">enable</span><span class="kw">:</span><span class="at"> </span><span class="ch">true</span></span><span id="cb11-3"><a href="#cb11-3"></a><span class="fu">onlypost</span><span class="kw">:</span><span class="at"> </span><span class="ch">false</span><span class="co">   # true则只会懒加载文章中的图片，logo头像什么的不会</span></span><span id="cb11-4"><a href="#cb11-4"></a><span class="fu">loadingImg</span><span class="kw">:</span><span class="at"> ./medias/loading.gif</span></span></code></pre></div><p><em>此插件与<code>hexo-asset-image</code>似乎不兼容，未解决。</em></p><h3 id="gitee和github双线部署">7.2 gitee和github双线部署</h3><p><em>未完待续...</em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zsh及oh-my-zsh安装</title>
      <link href="/2020/05/10/zsh-an-zhuang/"/>
      <url>/2020/05/10/zsh-an-zhuang/</url>
      
        <content type="html"><![CDATA[<p>zsh以及oh-my-zsh除了可以提高终端的颜值，而且通过众多的插件可以提高我们的使用体验，所以这里将其安装和使用总结在这里，便于之后使用。</p><h1 id="zsh安装">zsh安装</h1><p><a href="http://zsh.sourceforge.net/" target="_blank" rel="noopener">zsh</a>是一个类似bash的shell，同样也是一个脚本语言集。</p><h2 id="包管理器安装">包管理器安装</h2><p>这就不多赘述了，如果是Ubuntu</p><pre><code>apt-get install zsh</code></pre><p>如果是centos</p><pre><code>yum install zsh -y</code></pre><p>oh-my-zsh给我们总结了所有平台安装zsh的方式：<a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Installing-ZSH" target="_blank" rel="noopener">Installing ZSH</a>，其中也介绍了如何把zsh设置为默认终端的流程。</p><h2 id="源码安装">源码安装</h2><p>如果我们没有root权限，或者希望将zsh安装到一个确定的目录下，则需要使用<a href="http://zsh.sourceforge.net/Arc/source.html" target="_blank" rel="noopener">源码</a>安装。</p><ol type="1"><li><p>下载源码包，然后是标准的CMMI（configure、make、make install）：</p><pre><code>mkdir buildcd build../configure --prefix=/path/to/zshmakemake install</code></pre></li><li><p>将zsh加入到环境变量中</p></li><li><p>将下列语句加入到<code>.bash_profile</code>中，使得自动载入zsh以及将zsh设置为默认的终端（如果zsh被安装在或其被链接到<code>$HOME/.local/bin/zsh</code>）：</p><pre><code>[ -f $HOME/.local/bin/zsh ] &amp;&amp; {    echo "Type Y to run zsh: \c"    read line    [ "$line" = Y ] &amp;&amp; {        export SHELL=$HOME/.local/bin/zsh        exec $HOME/.local/bin/zsh -l    }}</code></pre></li></ol><h1 id="oh-my-zsh安装">oh-my-zsh安装</h1><p><a href="https://ohmyz.sh/#install" target="_blank" rel="noopener">oh-my-zsh</a>是一个开源的zsh configure framewo，有好看的主题，有众多的插件来提高其功能。其<a href="https://ohmyz.sh/#install" target="_blank" rel="noopener">官网</a>中有安装的方式，这里我们使用下面稍加修改的模式：</p><div class="sourceCode" id="cb5"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb5-1"><a href="#cb5-1"></a><span class="co"># 可能下不下来，这时只能手动下载</span></span><span id="cb5-2"><a href="#cb5-2"></a><span class="fu">wget</span> https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh</span><span id="cb5-3"><a href="#cb5-3"></a><span class="va">ZSH=</span>/path/to/oh-my-zsh <span class="fu">sh</span> install.sh</span></code></pre></div><p><code>/path/to/oh-my-zsh</code>是自定义安装目录。</p><p>如果想要卸载oh-my-zsh，直接运行<code>uninstall_oh_my_zsh</code>即可。</p><h1 id="oh-my-zsh配置">oh-my-zsh配置</h1><h2 id="themes">themes</h2><p>设置主题，只需要在<code>.zshrc</code>中更改<code>ZSH_THEME</code>，然后<code>source .zshrc</code>即可。</p><p>oh-my-zsh本身就预装了大量的<a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes" target="_blank" rel="noopener">主题</a>，在<code>$ZSH/themes</code>中。另外，还有大量的<a href="https://github.com/ohmyzsh/ohmyzsh/wiki/External-themes" target="_blank" rel="noopener">额外主题</a>，但需要进行安装。</p><h2 id="plugins">plugins</h2><p>插件可以帮助我们更加有效率的工作，比如进行命令的提示、历史命令的记录等。本身oh-my-zsh也预装了大量的插件，<a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Plugins-Overview" target="_blank" rel="noopener">这里</a>是其插件列表。同样，我们也可以安装一些<a href="https://github.com/ohmyzsh/ohmyzsh/wiki/External-plugins" target="_blank" rel="noopener">第三方插件</a>。</p><p>插件启用的方式也是非常简单的，即在<code>.zshrc</code>中的<code>plugins=(...)</code>中添加我们想要的插件即可。</p><p>比如，这里我添加的:</p><ol type="1"><li><p><a href="https://github.com/zsh-users/zsh-autosuggestions/blob/master/INSTALL.md" target="_blank" rel="noopener"><code>zsh-autosuggestions</code></a>:</p><pre><code>git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions</code></pre><p>添加<code>zsh-autosuggestions</code>到<code>plugins=()</code>中。</p></li><li><p><a href="https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/INSTALL.md" target="_blank" rel="noopener"><code>zsh-syntax-highlighting</code></a></p><pre><code>git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting</code></pre><p>添加<code>zsh-syntax-highlighting</code>到<code>plugins=()</code>中。</p></li><li><p>另外，我还添加了<code>pyenv</code>、<code>virtualenv</code>来显示虚拟环境下的python。</p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zsh </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
